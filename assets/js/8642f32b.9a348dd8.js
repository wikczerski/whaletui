"use strict";(self.webpackChunkwhaletui_docs=self.webpackChunkwhaletui_docs||[]).push([[622],{7742:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"concepts/networks","title":"Docker Networks","description":"Understanding Docker networking and network management in WhaleTUI","source":"@site/docs/concepts/networks.md","sourceDirName":"concepts","slug":"/concepts/networks","permalink":"/whaletui/docs/concepts/networks","draft":false,"unlisted":false,"editUrl":"https://github.com/wikczerski/whaletui/edit/main/docs/docs/concepts/networks.md","tags":[],"version":"current","frontMatter":{"id":"networks","title":"Docker Networks","sidebar_label":"Networks","description":"Understanding Docker networking and network management in WhaleTUI"},"sidebar":"docs","previous":{"title":"Images","permalink":"/whaletui/docs/concepts/images"},"next":{"title":"Volumes","permalink":"/whaletui/docs/concepts/volumes"}}');var s=r(4848),o=r(8453);const t={id:"networks",title:"Docker Networks",sidebar_label:"Networks",description:"Understanding Docker networking and network management in WhaleTUI"},c="Docker Networks",l={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What are Docker Networks?",id:"what-are-docker-networks",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Network Types",id:"network-types",level:2},{value:"Bridge Networks",id:"bridge-networks",level:3},{value:"Host Networks",id:"host-networks",level:3},{value:"Overlay Networks",id:"overlay-networks",level:3},{value:"Macvlan Networks",id:"macvlan-networks",level:3},{value:"None Networks",id:"none-networks",level:3},{value:"Network Management in WhaleTUI",id:"network-management-in-whaletui",level:2},{value:"Network List View",id:"network-list-view",level:3},{value:"Network Details",id:"network-details",level:3},{value:"Common Network Operations",id:"common-network-operations",level:2},{value:"Creating Networks",id:"creating-networks",level:3},{value:"Connecting Containers",id:"connecting-containers",level:3},{value:"Disconnecting Containers",id:"disconnecting-containers",level:3},{value:"Removing Networks",id:"removing-networks",level:3},{value:"Network Configuration",id:"network-configuration",level:2},{value:"IP Address Assignment",id:"ip-address-assignment",level:3},{value:"DNS Configuration",id:"dns-configuration",level:3},{value:"Port Publishing",id:"port-publishing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Network Design",id:"network-design",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Container Communication Problems",id:"container-communication-problems",level:4},{value:"DNS Resolution Issues",id:"dns-resolution-issues",level:4},{value:"Port Binding Problems",id:"port-binding-problems",level:4},{value:"Network Diagnostics",id:"network-diagnostics",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Network Policies",id:"network-policies",level:3},{value:"Service Mesh Integration",id:"service-mesh-integration",level:3},{value:"Network Monitoring",id:"network-monitoring",level:3},{value:"Swarm Mode",id:"swarm-mode",level:3},{value:"Integration with WhaleTUI",id:"integration-with-whaletui",level:2},{value:"Keyboard Shortcuts",id:"keyboard-shortcuts",level:3},{value:"Available Actions",id:"available-actions",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"docker-networks",children:"Docker Networks"})}),"\n",(0,s.jsx)(n.p,{children:"Docker networks enable containers to communicate with each other and with external systems. They provide isolation, security, and connectivity for your containerized applications."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#what-are-docker-networks",children:"What are Docker Networks?"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#network-types",children:"Network Types"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#network-management-in-whaletui",children:"Network Management in WhaleTUI"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#common-network-operations",children:"Common Network Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#network-configuration",children:"Network Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"what-are-docker-networks",children:"What are Docker Networks?"}),"\n",(0,s.jsx)(n.p,{children:"Docker networks are virtual networks that allow containers to communicate with each other and with external networks. They provide network isolation, security, and connectivity management for containerized applications."}),"\n",(0,s.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Isolation"}),": Containers in different networks cannot communicate directly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Discovery"}),": Containers can find each other by name within the same network"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Mapping"}),": Expose container ports to the host or external networks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load Balancing"}),": Distribute traffic across multiple containers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Control which containers can communicate with each other"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"network-types",children:"Network Types"}),"\n",(0,s.jsx)(n.h3,{id:"bridge-networks",children:"Bridge Networks"}),"\n",(0,s.jsx)(n.p,{children:"The default network type, providing automatic DNS resolution between containers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create a custom bridge network\ndocker network create my-network\n\n# Run containers on the network\ndocker run --network my-network --name web nginx\ndocker run --network my-network --name db postgres\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatic DNS resolution"}),"\n",(0,s.jsx)(n.li,{children:"Port publishing to host"}),"\n",(0,s.jsx)(n.li,{children:"Isolated from other networks"}),"\n",(0,s.jsx)(n.li,{children:"Good for single-host deployments"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"host-networks",children:"Host Networks"}),"\n",(0,s.jsx)(n.p,{children:"Containers share the host's network stack directly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run container with host networking\ndocker run --network host nginx\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No network isolation"}),"\n",(0,s.jsx)(n.li,{children:"Direct access to host ports"}),"\n",(0,s.jsx)(n.li,{children:"Better performance"}),"\n",(0,s.jsx)(n.li,{children:"Less secure"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"overlay-networks",children:"Overlay Networks"}),"\n",(0,s.jsx)(n.p,{children:"Enable communication between containers across multiple Docker hosts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create overlay network for swarm\ndocker network create --driver overlay my-overlay\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Multi-host communication"}),"\n",(0,s.jsx)(n.li,{children:"Swarm service integration"}),"\n",(0,s.jsx)(n.li,{children:"Encrypted communication"}),"\n",(0,s.jsx)(n.li,{children:"Complex configuration"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"macvlan-networks",children:"Macvlan Networks"}),"\n",(0,s.jsx)(n.p,{children:"Assign MAC addresses to containers for direct network access:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create macvlan network\ndocker network create -d macvlan \\\n  --subnet=192.168.1.0/24 \\\n  --gateway=192.168.1.1 \\\n  -o parent=eth0 my-macvlan\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Direct network access"}),"\n",(0,s.jsx)(n.li,{children:"MAC address assignment"}),"\n",(0,s.jsx)(n.li,{children:"VLAN support"}),"\n",(0,s.jsx)(n.li,{children:"Network performance"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"none-networks",children:"None Networks"}),"\n",(0,s.jsx)(n.p,{children:"Complete network isolation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run container without network access\ndocker run --network none alpine\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No network connectivity"}),"\n",(0,s.jsx)(n.li,{children:"Maximum isolation"}),"\n",(0,s.jsx)(n.li,{children:"Useful for security testing"}),"\n",(0,s.jsx)(n.li,{children:"Limited functionality"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"network-management-in-whaletui",children:"Network Management in WhaleTUI"}),"\n",(0,s.jsx)(n.p,{children:"WhaleTUI provides an intuitive interface for managing Docker networks through the terminal."}),"\n",(0,s.jsx)(n.h3,{id:"network-list-view",children:"Network List View"}),"\n",(0,s.jsx)(n.p,{children:"View all available networks with key information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 WhaleTUI - Docker Networks                                                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 NETWORK ID     NAME           DRIVER    SCOPE    CONTAINERS                 \u2502\n\u2502 abc123def456   bridge         bridge    local    3                          \u2502\n\u2502 def456ghi789   host           host      local    0                          \u2502\n\u2502 ghi789jkl012   none           null      local    1                          \u2502\n\u2502 jkl012mno345   my-network     bridge    local    2                          \u2502\n\u2502 mno345pqr678   my-overlay     overlay   swarm    5                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-details",children:"Network Details"}),"\n",(0,s.jsx)(n.p,{children:"Inspect network configuration and connected containers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network ID"}),": Unique identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Driver"}),": Network driver type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scope"}),": Local or swarm"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subnet"}),": IP address range"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gateway"}),": Default gateway"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connected Containers"}),": List of attached containers"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-network-operations",children:"Common Network Operations"}),"\n",(0,s.jsx)(n.h3,{id:"creating-networks",children:"Creating Networks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create bridge network with custom subnet\ndocker network create \\\n  --driver bridge \\\n  --subnet 172.18.0.0/16 \\\n  --gateway 172.18.0.1 \\\n  my-custom-network\n\n# Create network with labels\ndocker network create \\\n  --label environment=production \\\n  --label team=backend \\\n  prod-network\n"})}),"\n",(0,s.jsx)(n.h3,{id:"connecting-containers",children:"Connecting Containers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Connect existing container to network\ndocker network connect my-network container-name\n\n# Run container on specific network\ndocker run --network my-network --name web nginx\n\n# Connect to multiple networks\ndocker run --network frontend --network backend --name app myapp\n"})}),"\n",(0,s.jsx)(n.h3,{id:"disconnecting-containers",children:"Disconnecting Containers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Disconnect container from network\ndocker network disconnect my-network container-name\n\n# Force disconnect (even if container is running)\ndocker network disconnect -f my-network container-name\n"})}),"\n",(0,s.jsx)(n.h3,{id:"removing-networks",children:"Removing Networks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Remove unused network\ndocker network rm my-network\n\n# Remove all unused networks\ndocker network prune\n\n# Force remove network with connected containers\ndocker network rm -f my-network\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network-configuration",children:"Network Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"ip-address-assignment",children:"IP Address Assignment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Specify static IP for container\ndocker run --network my-network \\\n  --ip 172.18.0.10 \\\n  --name web nginx\n\n# Create network with specific IP range\ndocker network create \\\n  --subnet 10.0.0.0/24 \\\n  --ip-range 10.0.0.0/25 \\\n  my-subnet\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dns-configuration",children:"DNS Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Set custom DNS servers\ndocker run --dns 8.8.8.8 --dns 8.8.4.4 nginx\n\n# Use host DNS\ndocker run --dns-search example.com nginx\n\n# Custom DNS options\ndocker run --dns-opt use-vc nginx\n"})}),"\n",(0,s.jsx)(n.h3,{id:"port-publishing",children:"Port Publishing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Publish specific port\ndocker run -p 8080:80 nginx\n\n# Publish all ports\ndocker run -P nginx\n\n# Bind to specific interface\ndocker run -p 127.0.0.1:8080:80 nginx\n\n# Publish range of ports\ndocker run -p 8080-8090:80 nginx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"network-design",children:"Network Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Custom Networks"}),": Avoid default bridge for production"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Segmentation"}),": Separate frontend, backend, and database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Discovery"}),": Leverage Docker's built-in DNS"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security Groups"}),": Use network isolation for security"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose Appropriate Driver"}),": Bridge for single-host, overlay for multi-host"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize Network Hops"}),": Keep related containers on same network"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Host Networking"}),": For performance-critical applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor Network Usage"}),": Track bandwidth and latency"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Isolation"}),": Separate networks for different environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Exposure"}),": Only publish necessary ports"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Control"}),": Limit container-to-container communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encryption"}),": Use overlay networks with encryption for sensitive data"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h4,{id:"container-communication-problems",children:"Container Communication Problems"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check network connectivity\ndocker exec container-name ping other-container\n\n# Verify network configuration\ndocker network inspect network-name\n\n# Check container network settings\ndocker inspect container-name | grep -A 20 "NetworkSettings"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"dns-resolution-issues",children:"DNS Resolution Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Test DNS resolution\ndocker exec container-name nslookup other-container\n\n# Check DNS configuration\ndocker exec container-name cat /etc/resolv.conf\n\n# Restart network\ndocker network disconnect network-name container-name\ndocker network connect network-name container-name\n"})}),"\n",(0,s.jsx)(n.h4,{id:"port-binding-problems",children:"Port Binding Problems"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check port usage\nnetstat -tulpn | grep :8080\n\n# Verify port mapping\ndocker port container-name\n\n# Check firewall settings\nsudo ufw status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-diagnostics",children:"Network Diagnostics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Inspect network details\ndocker network inspect network-name\n\n# View network logs\ndocker logs container-name\n\n# Check network statistics\ndocker stats container-name\n\n# Monitor network traffic\ndocker exec container-name tcpdump -i eth0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,s.jsx)(n.p,{children:"Control traffic flow between containers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create network with custom policies\ndocker network create \\\n  --driver bridge \\\n  --opt com.docker.network.bridge.name=br0 \\\n  --opt com.docker.network.bridge.enable_icc=false \\\n  isolated-network\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-mesh-integration",children:"Service Mesh Integration"}),"\n",(0,s.jsx)(n.p,{children:"Integrate with service mesh solutions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Istio"}),": Advanced traffic management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linkerd"}),": Lightweight service mesh"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consul Connect"}),": Service-to-service communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Traefik"}),": Reverse proxy and load balancer"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"network-monitoring",children:"Network Monitoring"}),"\n",(0,s.jsx)(n.p,{children:"Monitor network performance and health:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install network monitoring tools\ndocker run -d --name netdata \\\n  -p 19999:19999 \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  netdata/netdata\n"})}),"\n",(0,s.jsx)(n.h3,{id:"swarm-mode",children:"Swarm Mode"}),"\n",(0,s.jsx)(n.p,{children:"In swarm mode, overlay networks span across multiple nodes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create overlay network for swarm\ndocker network create --driver overlay --subnet 10.0.9.0/24 my-network\n\n# Deploy service using overlay network\ndocker service create --name web --network my-network nginx:latest\n\n# Check network connectivity across nodes\ndocker network inspect my-network\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Concepts:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node Spanning"}),": Overlay networks automatically span across all swarm nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Discovery"}),": Services can discover each other across nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load Balancing"}),": Built-in load balancing across network endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Encrypted communication between nodes"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-whaletui",children:"Integration with WhaleTUI"}),"\n",(0,s.jsx)(n.p,{children:"WhaleTUI seamlessly integrates network management with other Docker operations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Management"}),": Create and manage containers on networks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Deployment"}),": Deploy services with network configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Volume Management"}),": Persist data across network changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image Management"}),": Use images with network requirements"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"keyboard-shortcuts",children:"Keyboard Shortcuts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:":networks"})," - Switch to Networks view"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Enter"})," - View network details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"i"})," - Inspect network details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ESC"})," - Close modal or go back"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Network management in WhaleTUI currently focuses on viewing and inspecting networks. For creating, modifying, and removing networks, use the Docker CLI directly."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"available-actions",children:"Available Actions"}),"\n",(0,s.jsx)(n.p,{children:"Use keyboard shortcuts and navigation for quick access to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Network inspection and details"}),"\n",(0,s.jsx)(n.li,{children:"Viewing network information"}),"\n",(0,s.jsx)(n.li,{children:"Container management (via Docker CLI)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/concepts/containers",children:"Containers"})," - Learn about Docker containers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/concepts/images",children:"Images"})," - Manage Docker images"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/concepts/volumes",children:"Volumes"})," - Manage persistent storage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/concepts/swarm",children:"Swarm"})," - Deploy overlay networks in a swarm"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/concepts/nodes",children:"Nodes"})," - Manage swarm nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/whaletui/docs/development/setup",children:"Development Setup"})," - Set up your development environment"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var i=r(6540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);