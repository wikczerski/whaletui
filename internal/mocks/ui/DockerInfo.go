// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDockerInfo creates a new instance of MockDockerInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDockerInfo(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDockerInfo {
	mock := &MockDockerInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDockerInfo is an autogenerated mock type for the DockerInfo type
type MockDockerInfo struct {
	mock.Mock
}

type MockDockerInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDockerInfo) EXPECT() *MockDockerInfo_Expecter {
	return &MockDockerInfo_Expecter{mock: &_m.Mock}
}

// GetConnectionMethod provides a mock function for the type MockDockerInfo
func (_mock *MockDockerInfo) GetConnectionMethod() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionMethod")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDockerInfo_GetConnectionMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionMethod'
type MockDockerInfo_GetConnectionMethod_Call struct {
	*mock.Call
}

// GetConnectionMethod is a helper method to define mock.On call
func (_e *MockDockerInfo_Expecter) GetConnectionMethod() *MockDockerInfo_GetConnectionMethod_Call {
	return &MockDockerInfo_GetConnectionMethod_Call{Call: _e.mock.On("GetConnectionMethod")}
}

func (_c *MockDockerInfo_GetConnectionMethod_Call) Run(run func()) *MockDockerInfo_GetConnectionMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDockerInfo_GetConnectionMethod_Call) Return(s string) *MockDockerInfo_GetConnectionMethod_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDockerInfo_GetConnectionMethod_Call) RunAndReturn(run func() string) *MockDockerInfo_GetConnectionMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoggingDriver provides a mock function for the type MockDockerInfo
func (_mock *MockDockerInfo) GetLoggingDriver() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoggingDriver")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDockerInfo_GetLoggingDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoggingDriver'
type MockDockerInfo_GetLoggingDriver_Call struct {
	*mock.Call
}

// GetLoggingDriver is a helper method to define mock.On call
func (_e *MockDockerInfo_Expecter) GetLoggingDriver() *MockDockerInfo_GetLoggingDriver_Call {
	return &MockDockerInfo_GetLoggingDriver_Call{Call: _e.mock.On("GetLoggingDriver")}
}

func (_c *MockDockerInfo_GetLoggingDriver_Call) Run(run func()) *MockDockerInfo_GetLoggingDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDockerInfo_GetLoggingDriver_Call) Return(s string) *MockDockerInfo_GetLoggingDriver_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDockerInfo_GetLoggingDriver_Call) RunAndReturn(run func() string) *MockDockerInfo_GetLoggingDriver_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperatingSystem provides a mock function for the type MockDockerInfo
func (_mock *MockDockerInfo) GetOperatingSystem() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOperatingSystem")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDockerInfo_GetOperatingSystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperatingSystem'
type MockDockerInfo_GetOperatingSystem_Call struct {
	*mock.Call
}

// GetOperatingSystem is a helper method to define mock.On call
func (_e *MockDockerInfo_Expecter) GetOperatingSystem() *MockDockerInfo_GetOperatingSystem_Call {
	return &MockDockerInfo_GetOperatingSystem_Call{Call: _e.mock.On("GetOperatingSystem")}
}

func (_c *MockDockerInfo_GetOperatingSystem_Call) Run(run func()) *MockDockerInfo_GetOperatingSystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDockerInfo_GetOperatingSystem_Call) Return(s string) *MockDockerInfo_GetOperatingSystem_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDockerInfo_GetOperatingSystem_Call) RunAndReturn(run func() string) *MockDockerInfo_GetOperatingSystem_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function for the type MockDockerInfo
func (_mock *MockDockerInfo) GetVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDockerInfo_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockDockerInfo_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *MockDockerInfo_Expecter) GetVersion() *MockDockerInfo_GetVersion_Call {
	return &MockDockerInfo_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *MockDockerInfo_GetVersion_Call) Run(run func()) *MockDockerInfo_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDockerInfo_GetVersion_Call) Return(s string) *MockDockerInfo_GetVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDockerInfo_GetVersion_Call) RunAndReturn(run func() string) *MockDockerInfo_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}
