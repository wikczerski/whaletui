// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/ui/interfaces"
)

// NewMockServiceFactoryInterface creates a new instance of MockServiceFactoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceFactoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockServiceFactoryInterface {
	mock := &MockServiceFactoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceFactoryInterface is an autogenerated mock type for the ServiceFactoryInterface type
type MockServiceFactoryInterface struct {
	mock.Mock
}

type MockServiceFactoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceFactoryInterface) EXPECT() *MockServiceFactoryInterface_Expecter {
	return &MockServiceFactoryInterface_Expecter{mock: &_m.Mock}
}

// GetContainerService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetContainerService() interfaces.ContainerService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerService")
	}

	var r0 interfaces.ContainerService
	if returnFunc, ok := ret.Get(0).(func() interfaces.ContainerService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ContainerService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetContainerService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerService'
type MockServiceFactoryInterface_GetContainerService_Call struct {
	*mock.Call
}

// GetContainerService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetContainerService() *MockServiceFactoryInterface_GetContainerService_Call {
	return &MockServiceFactoryInterface_GetContainerService_Call{Call: _e.mock.On("GetContainerService")}
}

func (_c *MockServiceFactoryInterface_GetContainerService_Call) Run(run func()) *MockServiceFactoryInterface_GetContainerService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetContainerService_Call) Return(containerService interfaces.ContainerService) *MockServiceFactoryInterface_GetContainerService_Call {
	_c.Call.Return(containerService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetContainerService_Call) RunAndReturn(run func() interfaces.ContainerService) *MockServiceFactoryInterface_GetContainerService_Call {
	_c.Call.Return(run)
	return _c
}

// GetDockerInfoService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetDockerInfoService() interfaces.DockerInfoService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDockerInfoService")
	}

	var r0 interfaces.DockerInfoService
	if returnFunc, ok := ret.Get(0).(func() interfaces.DockerInfoService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.DockerInfoService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetDockerInfoService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDockerInfoService'
type MockServiceFactoryInterface_GetDockerInfoService_Call struct {
	*mock.Call
}

// GetDockerInfoService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetDockerInfoService() *MockServiceFactoryInterface_GetDockerInfoService_Call {
	return &MockServiceFactoryInterface_GetDockerInfoService_Call{Call: _e.mock.On("GetDockerInfoService")}
}

func (_c *MockServiceFactoryInterface_GetDockerInfoService_Call) Run(run func()) *MockServiceFactoryInterface_GetDockerInfoService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetDockerInfoService_Call) Return(dockerInfoService interfaces.DockerInfoService) *MockServiceFactoryInterface_GetDockerInfoService_Call {
	_c.Call.Return(dockerInfoService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetDockerInfoService_Call) RunAndReturn(run func() interfaces.DockerInfoService) *MockServiceFactoryInterface_GetDockerInfoService_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetImageService() interfaces.ImageService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageService")
	}

	var r0 interfaces.ImageService
	if returnFunc, ok := ret.Get(0).(func() interfaces.ImageService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ImageService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetImageService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageService'
type MockServiceFactoryInterface_GetImageService_Call struct {
	*mock.Call
}

// GetImageService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetImageService() *MockServiceFactoryInterface_GetImageService_Call {
	return &MockServiceFactoryInterface_GetImageService_Call{Call: _e.mock.On("GetImageService")}
}

func (_c *MockServiceFactoryInterface_GetImageService_Call) Run(run func()) *MockServiceFactoryInterface_GetImageService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetImageService_Call) Return(imageService interfaces.ImageService) *MockServiceFactoryInterface_GetImageService_Call {
	_c.Call.Return(imageService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetImageService_Call) RunAndReturn(run func() interfaces.ImageService) *MockServiceFactoryInterface_GetImageService_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetLogsService() interfaces.LogsService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogsService")
	}

	var r0 interfaces.LogsService
	if returnFunc, ok := ret.Get(0).(func() interfaces.LogsService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.LogsService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetLogsService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsService'
type MockServiceFactoryInterface_GetLogsService_Call struct {
	*mock.Call
}

// GetLogsService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetLogsService() *MockServiceFactoryInterface_GetLogsService_Call {
	return &MockServiceFactoryInterface_GetLogsService_Call{Call: _e.mock.On("GetLogsService")}
}

func (_c *MockServiceFactoryInterface_GetLogsService_Call) Run(run func()) *MockServiceFactoryInterface_GetLogsService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetLogsService_Call) Return(logsService interfaces.LogsService) *MockServiceFactoryInterface_GetLogsService_Call {
	_c.Call.Return(logsService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetLogsService_Call) RunAndReturn(run func() interfaces.LogsService) *MockServiceFactoryInterface_GetLogsService_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetNetworkService() interfaces.NetworkService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkService")
	}

	var r0 interfaces.NetworkService
	if returnFunc, ok := ret.Get(0).(func() interfaces.NetworkService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NetworkService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetNetworkService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkService'
type MockServiceFactoryInterface_GetNetworkService_Call struct {
	*mock.Call
}

// GetNetworkService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetNetworkService() *MockServiceFactoryInterface_GetNetworkService_Call {
	return &MockServiceFactoryInterface_GetNetworkService_Call{Call: _e.mock.On("GetNetworkService")}
}

func (_c *MockServiceFactoryInterface_GetNetworkService_Call) Run(run func()) *MockServiceFactoryInterface_GetNetworkService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetNetworkService_Call) Return(networkService interfaces.NetworkService) *MockServiceFactoryInterface_GetNetworkService_Call {
	_c.Call.Return(networkService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetNetworkService_Call) RunAndReturn(run func() interfaces.NetworkService) *MockServiceFactoryInterface_GetNetworkService_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwarmNodeService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetSwarmNodeService() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSwarmNodeService")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetSwarmNodeService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwarmNodeService'
type MockServiceFactoryInterface_GetSwarmNodeService_Call struct {
	*mock.Call
}

// GetSwarmNodeService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetSwarmNodeService() *MockServiceFactoryInterface_GetSwarmNodeService_Call {
	return &MockServiceFactoryInterface_GetSwarmNodeService_Call{Call: _e.mock.On("GetSwarmNodeService")}
}

func (_c *MockServiceFactoryInterface_GetSwarmNodeService_Call) Run(run func()) *MockServiceFactoryInterface_GetSwarmNodeService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetSwarmNodeService_Call) Return(v any) *MockServiceFactoryInterface_GetSwarmNodeService_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockServiceFactoryInterface_GetSwarmNodeService_Call) RunAndReturn(run func() any) *MockServiceFactoryInterface_GetSwarmNodeService_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwarmServiceService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetSwarmServiceService() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSwarmServiceService")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetSwarmServiceService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwarmServiceService'
type MockServiceFactoryInterface_GetSwarmServiceService_Call struct {
	*mock.Call
}

// GetSwarmServiceService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetSwarmServiceService() *MockServiceFactoryInterface_GetSwarmServiceService_Call {
	return &MockServiceFactoryInterface_GetSwarmServiceService_Call{Call: _e.mock.On("GetSwarmServiceService")}
}

func (_c *MockServiceFactoryInterface_GetSwarmServiceService_Call) Run(run func()) *MockServiceFactoryInterface_GetSwarmServiceService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetSwarmServiceService_Call) Return(v any) *MockServiceFactoryInterface_GetSwarmServiceService_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockServiceFactoryInterface_GetSwarmServiceService_Call) RunAndReturn(run func() any) *MockServiceFactoryInterface_GetSwarmServiceService_Call {
	_c.Call.Return(run)
	return _c
}

// GetVolumeService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) GetVolumeService() interfaces.VolumeService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeService")
	}

	var r0 interfaces.VolumeService
	if returnFunc, ok := ret.Get(0).(func() interfaces.VolumeService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.VolumeService)
		}
	}
	return r0
}

// MockServiceFactoryInterface_GetVolumeService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVolumeService'
type MockServiceFactoryInterface_GetVolumeService_Call struct {
	*mock.Call
}

// GetVolumeService is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) GetVolumeService() *MockServiceFactoryInterface_GetVolumeService_Call {
	return &MockServiceFactoryInterface_GetVolumeService_Call{Call: _e.mock.On("GetVolumeService")}
}

func (_c *MockServiceFactoryInterface_GetVolumeService_Call) Run(run func()) *MockServiceFactoryInterface_GetVolumeService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_GetVolumeService_Call) Return(volumeService interfaces.VolumeService) *MockServiceFactoryInterface_GetVolumeService_Call {
	_c.Call.Return(volumeService)
	return _c
}

func (_c *MockServiceFactoryInterface_GetVolumeService_Call) RunAndReturn(run func() interfaces.VolumeService) *MockServiceFactoryInterface_GetVolumeService_Call {
	_c.Call.Return(run)
	return _c
}

// IsContainerServiceAvailable provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) IsContainerServiceAvailable() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsContainerServiceAvailable")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockServiceFactoryInterface_IsContainerServiceAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsContainerServiceAvailable'
type MockServiceFactoryInterface_IsContainerServiceAvailable_Call struct {
	*mock.Call
}

// IsContainerServiceAvailable is a helper method to define mock.On call
func (_e *MockServiceFactoryInterface_Expecter) IsContainerServiceAvailable() *MockServiceFactoryInterface_IsContainerServiceAvailable_Call {
	return &MockServiceFactoryInterface_IsContainerServiceAvailable_Call{Call: _e.mock.On("IsContainerServiceAvailable")}
}

func (_c *MockServiceFactoryInterface_IsContainerServiceAvailable_Call) Run(run func()) *MockServiceFactoryInterface_IsContainerServiceAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceFactoryInterface_IsContainerServiceAvailable_Call) Return(b bool) *MockServiceFactoryInterface_IsContainerServiceAvailable_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockServiceFactoryInterface_IsContainerServiceAvailable_Call) RunAndReturn(run func() bool) *MockServiceFactoryInterface_IsContainerServiceAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsServiceAvailable provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) IsServiceAvailable(serviceName string) bool {
	ret := _mock.Called(serviceName)

	if len(ret) == 0 {
		panic("no return value specified for IsServiceAvailable")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(serviceName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockServiceFactoryInterface_IsServiceAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServiceAvailable'
type MockServiceFactoryInterface_IsServiceAvailable_Call struct {
	*mock.Call
}

// IsServiceAvailable is a helper method to define mock.On call
//   - serviceName string
func (_e *MockServiceFactoryInterface_Expecter) IsServiceAvailable(serviceName interface{}) *MockServiceFactoryInterface_IsServiceAvailable_Call {
	return &MockServiceFactoryInterface_IsServiceAvailable_Call{Call: _e.mock.On("IsServiceAvailable", serviceName)}
}

func (_c *MockServiceFactoryInterface_IsServiceAvailable_Call) Run(run func(serviceName string)) *MockServiceFactoryInterface_IsServiceAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceFactoryInterface_IsServiceAvailable_Call) Return(b bool) *MockServiceFactoryInterface_IsServiceAvailable_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockServiceFactoryInterface_IsServiceAvailable_Call) RunAndReturn(run func(serviceName string) bool) *MockServiceFactoryInterface_IsServiceAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// SetCurrentService provides a mock function for the type MockServiceFactoryInterface
func (_mock *MockServiceFactoryInterface) SetCurrentService(serviceName string) {
	_mock.Called(serviceName)
	return
}

// MockServiceFactoryInterface_SetCurrentService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCurrentService'
type MockServiceFactoryInterface_SetCurrentService_Call struct {
	*mock.Call
}

// SetCurrentService is a helper method to define mock.On call
//   - serviceName string
func (_e *MockServiceFactoryInterface_Expecter) SetCurrentService(serviceName interface{}) *MockServiceFactoryInterface_SetCurrentService_Call {
	return &MockServiceFactoryInterface_SetCurrentService_Call{Call: _e.mock.On("SetCurrentService", serviceName)}
}

func (_c *MockServiceFactoryInterface_SetCurrentService_Call) Run(run func(serviceName string)) *MockServiceFactoryInterface_SetCurrentService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceFactoryInterface_SetCurrentService_Call) Return() *MockServiceFactoryInterface_SetCurrentService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceFactoryInterface_SetCurrentService_Call) RunAndReturn(run func(serviceName string)) *MockServiceFactoryInterface_SetCurrentService_Call {
	_c.Run(run)
	return _c
}
