// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wikczerski/whaletui/internal/config"
	"github.com/wikczerski/whaletui/internal/ui/interfaces"
)

// NewMockUIInterface creates a new instance of MockUIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUIInterface(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockUIInterface {
	mock := &MockUIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUIInterface is an autogenerated mock type for the UIInterface type
type MockUIInterface struct {
	mock.Mock
}

type MockUIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUIInterface) EXPECT() *MockUIInterface_Expecter {
	return &MockUIInterface_Expecter{mock: &_m.Mock}
}

// GetApp provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetApp() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockUIInterface_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetApp() *MockUIInterface_GetApp_Call {
	return &MockUIInterface_GetApp_Call{Call: _e.mock.On("GetApp")}
}

func (_c *MockUIInterface_GetApp_Call) Run(run func()) *MockUIInterface_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetApp_Call) Return(v any) *MockUIInterface_GetApp_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetApp_Call) RunAndReturn(run func() any) *MockUIInterface_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerService provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetContainerService() interfaces.ContainerService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerService")
	}

	var r0 interfaces.ContainerService
	if returnFunc, ok := ret.Get(0).(func() interfaces.ContainerService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ContainerService)
		}
	}
	return r0
}

// MockUIInterface_GetContainerService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerService'
type MockUIInterface_GetContainerService_Call struct {
	*mock.Call
}

// GetContainerService is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetContainerService() *MockUIInterface_GetContainerService_Call {
	return &MockUIInterface_GetContainerService_Call{Call: _e.mock.On("GetContainerService")}
}

func (_c *MockUIInterface_GetContainerService_Call) Run(run func()) *MockUIInterface_GetContainerService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetContainerService_Call) Return(containerService interfaces.ContainerService) *MockUIInterface_GetContainerService_Call {
	_c.Call.Return(containerService)
	return _c
}

func (_c *MockUIInterface_GetContainerService_Call) RunAndReturn(run func() interfaces.ContainerService) *MockUIInterface_GetContainerService_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentActions provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetCurrentActions() map[rune]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentActions")
	}

	var r0 map[rune]string
	if returnFunc, ok := ret.Get(0).(func() map[rune]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rune]string)
		}
	}
	return r0
}

// MockUIInterface_GetCurrentActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentActions'
type MockUIInterface_GetCurrentActions_Call struct {
	*mock.Call
}

// GetCurrentActions is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetCurrentActions() *MockUIInterface_GetCurrentActions_Call {
	return &MockUIInterface_GetCurrentActions_Call{Call: _e.mock.On("GetCurrentActions")}
}

func (_c *MockUIInterface_GetCurrentActions_Call) Run(run func()) *MockUIInterface_GetCurrentActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetCurrentActions_Call) Return(runeToString map[rune]string) *MockUIInterface_GetCurrentActions_Call {
	_c.Call.Return(runeToString)
	return _c
}

func (_c *MockUIInterface_GetCurrentActions_Call) RunAndReturn(run func() map[rune]string) *MockUIInterface_GetCurrentActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentView provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetCurrentView() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentView")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockUIInterface_GetCurrentView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentView'
type MockUIInterface_GetCurrentView_Call struct {
	*mock.Call
}

// GetCurrentView is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetCurrentView() *MockUIInterface_GetCurrentView_Call {
	return &MockUIInterface_GetCurrentView_Call{Call: _e.mock.On("GetCurrentView")}
}

func (_c *MockUIInterface_GetCurrentView_Call) Run(run func()) *MockUIInterface_GetCurrentView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetCurrentView_Call) Return(ifaceVal interface{}) *MockUIInterface_GetCurrentView_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockUIInterface_GetCurrentView_Call) RunAndReturn(run func() interface{}) *MockUIInterface_GetCurrentView_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentViewActions provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetCurrentViewActions() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentViewActions")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockUIInterface_GetCurrentViewActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentViewActions'
type MockUIInterface_GetCurrentViewActions_Call struct {
	*mock.Call
}

// GetCurrentViewActions is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetCurrentViewActions() *MockUIInterface_GetCurrentViewActions_Call {
	return &MockUIInterface_GetCurrentViewActions_Call{Call: _e.mock.On("GetCurrentViewActions")}
}

func (_c *MockUIInterface_GetCurrentViewActions_Call) Run(run func()) *MockUIInterface_GetCurrentViewActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetCurrentViewActions_Call) Return(s string) *MockUIInterface_GetCurrentViewActions_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockUIInterface_GetCurrentViewActions_Call) RunAndReturn(run func() string) *MockUIInterface_GetCurrentViewActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentViewNavigation provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetCurrentViewNavigation() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentViewNavigation")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockUIInterface_GetCurrentViewNavigation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentViewNavigation'
type MockUIInterface_GetCurrentViewNavigation_Call struct {
	*mock.Call
}

// GetCurrentViewNavigation is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetCurrentViewNavigation() *MockUIInterface_GetCurrentViewNavigation_Call {
	return &MockUIInterface_GetCurrentViewNavigation_Call{Call: _e.mock.On("GetCurrentViewNavigation")}
}

func (_c *MockUIInterface_GetCurrentViewNavigation_Call) Run(run func()) *MockUIInterface_GetCurrentViewNavigation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetCurrentViewNavigation_Call) Return(s string) *MockUIInterface_GetCurrentViewNavigation_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockUIInterface_GetCurrentViewNavigation_Call) RunAndReturn(run func() string) *MockUIInterface_GetCurrentViewNavigation_Call {
	_c.Call.Return(run)
	return _c
}

// GetMainFlex provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetMainFlex() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMainFlex")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetMainFlex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMainFlex'
type MockUIInterface_GetMainFlex_Call struct {
	*mock.Call
}

// GetMainFlex is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetMainFlex() *MockUIInterface_GetMainFlex_Call {
	return &MockUIInterface_GetMainFlex_Call{Call: _e.mock.On("GetMainFlex")}
}

func (_c *MockUIInterface_GetMainFlex_Call) Run(run func()) *MockUIInterface_GetMainFlex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetMainFlex_Call) Return(v any) *MockUIInterface_GetMainFlex_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetMainFlex_Call) RunAndReturn(run func() any) *MockUIInterface_GetMainFlex_Call {
	_c.Call.Return(run)
	return _c
}

// GetPages provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetPages() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPages")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPages'
type MockUIInterface_GetPages_Call struct {
	*mock.Call
}

// GetPages is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetPages() *MockUIInterface_GetPages_Call {
	return &MockUIInterface_GetPages_Call{Call: _e.mock.On("GetPages")}
}

func (_c *MockUIInterface_GetPages_Call) Run(run func()) *MockUIInterface_GetPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetPages_Call) Return(v any) *MockUIInterface_GetPages_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetPages_Call) RunAndReturn(run func() any) *MockUIInterface_GetPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetServices() interfaces.ServiceFactoryInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 interfaces.ServiceFactoryInterface
	if returnFunc, ok := ret.Get(0).(func() interfaces.ServiceFactoryInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ServiceFactoryInterface)
		}
	}
	return r0
}

// MockUIInterface_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type MockUIInterface_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetServices() *MockUIInterface_GetServices_Call {
	return &MockUIInterface_GetServices_Call{Call: _e.mock.On("GetServices")}
}

func (_c *MockUIInterface_GetServices_Call) Run(run func()) *MockUIInterface_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetServices_Call) Return(serviceFactoryInterface interfaces.ServiceFactoryInterface) *MockUIInterface_GetServices_Call {
	_c.Call.Return(serviceFactoryInterface)
	return _c
}

func (_c *MockUIInterface_GetServices_Call) RunAndReturn(run func() interfaces.ServiceFactoryInterface) *MockUIInterface_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicesAny provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetServicesAny() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServicesAny")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetServicesAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicesAny'
type MockUIInterface_GetServicesAny_Call struct {
	*mock.Call
}

// GetServicesAny is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetServicesAny() *MockUIInterface_GetServicesAny_Call {
	return &MockUIInterface_GetServicesAny_Call{Call: _e.mock.On("GetServicesAny")}
}

func (_c *MockUIInterface_GetServicesAny_Call) Run(run func()) *MockUIInterface_GetServicesAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetServicesAny_Call) Return(v any) *MockUIInterface_GetServicesAny_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetServicesAny_Call) RunAndReturn(run func() any) *MockUIInterface_GetServicesAny_Call {
	_c.Call.Return(run)
	return _c
}

// GetShutdownChan provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetShutdownChan() chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShutdownChan")
	}

	var r0 chan struct{}
	if returnFunc, ok := ret.Get(0).(func() chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}
	return r0
}

// MockUIInterface_GetShutdownChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShutdownChan'
type MockUIInterface_GetShutdownChan_Call struct {
	*mock.Call
}

// GetShutdownChan is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetShutdownChan() *MockUIInterface_GetShutdownChan_Call {
	return &MockUIInterface_GetShutdownChan_Call{Call: _e.mock.On("GetShutdownChan")}
}

func (_c *MockUIInterface_GetShutdownChan_Call) Run(run func()) *MockUIInterface_GetShutdownChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetShutdownChan_Call) Return(valCh chan struct{}) *MockUIInterface_GetShutdownChan_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockUIInterface_GetShutdownChan_Call) RunAndReturn(run func() chan struct{}) *MockUIInterface_GetShutdownChan_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwarmNodeService provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetSwarmNodeService() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSwarmNodeService")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetSwarmNodeService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwarmNodeService'
type MockUIInterface_GetSwarmNodeService_Call struct {
	*mock.Call
}

// GetSwarmNodeService is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetSwarmNodeService() *MockUIInterface_GetSwarmNodeService_Call {
	return &MockUIInterface_GetSwarmNodeService_Call{Call: _e.mock.On("GetSwarmNodeService")}
}

func (_c *MockUIInterface_GetSwarmNodeService_Call) Run(run func()) *MockUIInterface_GetSwarmNodeService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetSwarmNodeService_Call) Return(v any) *MockUIInterface_GetSwarmNodeService_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetSwarmNodeService_Call) RunAndReturn(run func() any) *MockUIInterface_GetSwarmNodeService_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwarmServiceService provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetSwarmServiceService() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSwarmServiceService")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetSwarmServiceService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwarmServiceService'
type MockUIInterface_GetSwarmServiceService_Call struct {
	*mock.Call
}

// GetSwarmServiceService is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetSwarmServiceService() *MockUIInterface_GetSwarmServiceService_Call {
	return &MockUIInterface_GetSwarmServiceService_Call{Call: _e.mock.On("GetSwarmServiceService")}
}

func (_c *MockUIInterface_GetSwarmServiceService_Call) Run(run func()) *MockUIInterface_GetSwarmServiceService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetSwarmServiceService_Call) Return(v any) *MockUIInterface_GetSwarmServiceService_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetSwarmServiceService_Call) RunAndReturn(run func() any) *MockUIInterface_GetSwarmServiceService_Call {
	_c.Call.Return(run)
	return _c
}

// GetThemeManager provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetThemeManager() *config.ThemeManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetThemeManager")
	}

	var r0 *config.ThemeManager
	if returnFunc, ok := ret.Get(0).(func() *config.ThemeManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ThemeManager)
		}
	}
	return r0
}

// MockUIInterface_GetThemeManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThemeManager'
type MockUIInterface_GetThemeManager_Call struct {
	*mock.Call
}

// GetThemeManager is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetThemeManager() *MockUIInterface_GetThemeManager_Call {
	return &MockUIInterface_GetThemeManager_Call{Call: _e.mock.On("GetThemeManager")}
}

func (_c *MockUIInterface_GetThemeManager_Call) Run(run func()) *MockUIInterface_GetThemeManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetThemeManager_Call) Return(themeManager *config.ThemeManager) *MockUIInterface_GetThemeManager_Call {
	_c.Call.Return(themeManager)
	return _c
}

func (_c *MockUIInterface_GetThemeManager_Call) RunAndReturn(run func() *config.ThemeManager) *MockUIInterface_GetThemeManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetViewContainer provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetViewContainer() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetViewContainer")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetViewContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViewContainer'
type MockUIInterface_GetViewContainer_Call struct {
	*mock.Call
}

// GetViewContainer is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetViewContainer() *MockUIInterface_GetViewContainer_Call {
	return &MockUIInterface_GetViewContainer_Call{Call: _e.mock.On("GetViewContainer")}
}

func (_c *MockUIInterface_GetViewContainer_Call) Run(run func()) *MockUIInterface_GetViewContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetViewContainer_Call) Return(v any) *MockUIInterface_GetViewContainer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetViewContainer_Call) RunAndReturn(run func() any) *MockUIInterface_GetViewContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetViewRegistry provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) GetViewRegistry() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetViewRegistry")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockUIInterface_GetViewRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViewRegistry'
type MockUIInterface_GetViewRegistry_Call struct {
	*mock.Call
}

// GetViewRegistry is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) GetViewRegistry() *MockUIInterface_GetViewRegistry_Call {
	return &MockUIInterface_GetViewRegistry_Call{Call: _e.mock.On("GetViewRegistry")}
}

func (_c *MockUIInterface_GetViewRegistry_Call) Run(run func()) *MockUIInterface_GetViewRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_GetViewRegistry_Call) Return(v any) *MockUIInterface_GetViewRegistry_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUIInterface_GetViewRegistry_Call) RunAndReturn(run func() any) *MockUIInterface_GetViewRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// IsInDetailsMode provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) IsInDetailsMode() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInDetailsMode")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUIInterface_IsInDetailsMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInDetailsMode'
type MockUIInterface_IsInDetailsMode_Call struct {
	*mock.Call
}

// IsInDetailsMode is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) IsInDetailsMode() *MockUIInterface_IsInDetailsMode_Call {
	return &MockUIInterface_IsInDetailsMode_Call{Call: _e.mock.On("IsInDetailsMode")}
}

func (_c *MockUIInterface_IsInDetailsMode_Call) Run(run func()) *MockUIInterface_IsInDetailsMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_IsInDetailsMode_Call) Return(b bool) *MockUIInterface_IsInDetailsMode_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUIInterface_IsInDetailsMode_Call) RunAndReturn(run func() bool) *MockUIInterface_IsInDetailsMode_Call {
	_c.Call.Return(run)
	return _c
}

// IsInLogsMode provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) IsInLogsMode() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInLogsMode")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUIInterface_IsInLogsMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInLogsMode'
type MockUIInterface_IsInLogsMode_Call struct {
	*mock.Call
}

// IsInLogsMode is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) IsInLogsMode() *MockUIInterface_IsInLogsMode_Call {
	return &MockUIInterface_IsInLogsMode_Call{Call: _e.mock.On("IsInLogsMode")}
}

func (_c *MockUIInterface_IsInLogsMode_Call) Run(run func()) *MockUIInterface_IsInLogsMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_IsInLogsMode_Call) Return(b bool) *MockUIInterface_IsInLogsMode_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUIInterface_IsInLogsMode_Call) RunAndReturn(run func() bool) *MockUIInterface_IsInLogsMode_Call {
	_c.Call.Return(run)
	return _c
}

// IsModalActive provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) IsModalActive() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsModalActive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUIInterface_IsModalActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModalActive'
type MockUIInterface_IsModalActive_Call struct {
	*mock.Call
}

// IsModalActive is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) IsModalActive() *MockUIInterface_IsModalActive_Call {
	return &MockUIInterface_IsModalActive_Call{Call: _e.mock.On("IsModalActive")}
}

func (_c *MockUIInterface_IsModalActive_Call) Run(run func()) *MockUIInterface_IsModalActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_IsModalActive_Call) Return(b bool) *MockUIInterface_IsModalActive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUIInterface_IsModalActive_Call) RunAndReturn(run func() bool) *MockUIInterface_IsModalActive_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadTheme provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ReloadTheme() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReloadTheme")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUIInterface_ReloadTheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadTheme'
type MockUIInterface_ReloadTheme_Call struct {
	*mock.Call
}

// ReloadTheme is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) ReloadTheme() *MockUIInterface_ReloadTheme_Call {
	return &MockUIInterface_ReloadTheme_Call{Call: _e.mock.On("ReloadTheme")}
}

func (_c *MockUIInterface_ReloadTheme_Call) Run(run func()) *MockUIInterface_ReloadTheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_ReloadTheme_Call) Return(err error) *MockUIInterface_ReloadTheme_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUIInterface_ReloadTheme_Call) RunAndReturn(run func() error) *MockUIInterface_ReloadTheme_Call {
	_c.Call.Return(run)
	return _c
}

// ShowConfirm provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowConfirm(s string, fn func(bool)) {
	_mock.Called(s, fn)
	return
}

// MockUIInterface_ShowConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowConfirm'
type MockUIInterface_ShowConfirm_Call struct {
	*mock.Call
}

// ShowConfirm is a helper method to define mock.On call
//   - s string
//   - fn func(bool)
func (_e *MockUIInterface_Expecter) ShowConfirm(s interface{}, fn interface{}) *MockUIInterface_ShowConfirm_Call {
	return &MockUIInterface_ShowConfirm_Call{Call: _e.mock.On("ShowConfirm", s, fn)}
}

func (_c *MockUIInterface_ShowConfirm_Call) Run(run func(s string, fn func(bool))) *MockUIInterface_ShowConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(bool)
		if args[1] != nil {
			arg1 = args[1].(func(bool))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowConfirm_Call) Return() *MockUIInterface_ShowConfirm_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowConfirm_Call) RunAndReturn(run func(s string, fn func(bool))) *MockUIInterface_ShowConfirm_Call {
	_c.Run(run)
	return _c
}

// ShowContextualHelp provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowContextualHelp(s string, s1 string) {
	_mock.Called(s, s1)
	return
}

// MockUIInterface_ShowContextualHelp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowContextualHelp'
type MockUIInterface_ShowContextualHelp_Call struct {
	*mock.Call
}

// ShowContextualHelp is a helper method to define mock.On call
//   - s string
//   - s1 string
func (_e *MockUIInterface_Expecter) ShowContextualHelp(s interface{}, s1 interface{}) *MockUIInterface_ShowContextualHelp_Call {
	return &MockUIInterface_ShowContextualHelp_Call{Call: _e.mock.On("ShowContextualHelp", s, s1)}
}

func (_c *MockUIInterface_ShowContextualHelp_Call) Run(run func(s string, s1 string)) *MockUIInterface_ShowContextualHelp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowContextualHelp_Call) Return() *MockUIInterface_ShowContextualHelp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowContextualHelp_Call) RunAndReturn(run func(s string, s1 string)) *MockUIInterface_ShowContextualHelp_Call {
	_c.Run(run)
	return _c
}

// ShowCurrentView provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowCurrentView() {
	_mock.Called()
	return
}

// MockUIInterface_ShowCurrentView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowCurrentView'
type MockUIInterface_ShowCurrentView_Call struct {
	*mock.Call
}

// ShowCurrentView is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) ShowCurrentView() *MockUIInterface_ShowCurrentView_Call {
	return &MockUIInterface_ShowCurrentView_Call{Call: _e.mock.On("ShowCurrentView")}
}

func (_c *MockUIInterface_ShowCurrentView_Call) Run(run func()) *MockUIInterface_ShowCurrentView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_ShowCurrentView_Call) Return() *MockUIInterface_ShowCurrentView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowCurrentView_Call) RunAndReturn(run func()) *MockUIInterface_ShowCurrentView_Call {
	_c.Run(run)
	return _c
}

// ShowDetails provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowDetails(v any) {
	_mock.Called(v)
	return
}

// MockUIInterface_ShowDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowDetails'
type MockUIInterface_ShowDetails_Call struct {
	*mock.Call
}

// ShowDetails is a helper method to define mock.On call
//   - v any
func (_e *MockUIInterface_Expecter) ShowDetails(v interface{}) *MockUIInterface_ShowDetails_Call {
	return &MockUIInterface_ShowDetails_Call{Call: _e.mock.On("ShowDetails", v)}
}

func (_c *MockUIInterface_ShowDetails_Call) Run(run func(v any)) *MockUIInterface_ShowDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowDetails_Call) Return() *MockUIInterface_ShowDetails_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowDetails_Call) RunAndReturn(run func(v any)) *MockUIInterface_ShowDetails_Call {
	_c.Run(run)
	return _c
}

// ShowError provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowError(err error) {
	_mock.Called(err)
	return
}

// MockUIInterface_ShowError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowError'
type MockUIInterface_ShowError_Call struct {
	*mock.Call
}

// ShowError is a helper method to define mock.On call
//   - err error
func (_e *MockUIInterface_Expecter) ShowError(err interface{}) *MockUIInterface_ShowError_Call {
	return &MockUIInterface_ShowError_Call{Call: _e.mock.On("ShowError", err)}
}

func (_c *MockUIInterface_ShowError_Call) Run(run func(err error)) *MockUIInterface_ShowError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowError_Call) Return() *MockUIInterface_ShowError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowError_Call) RunAndReturn(run func(err error)) *MockUIInterface_ShowError_Call {
	_c.Run(run)
	return _c
}

// ShowFallbackDialog provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowFallbackDialog(s string, err error, strings []string, fn func(string)) {
	_mock.Called(s, err, strings, fn)
	return
}

// MockUIInterface_ShowFallbackDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowFallbackDialog'
type MockUIInterface_ShowFallbackDialog_Call struct {
	*mock.Call
}

// ShowFallbackDialog is a helper method to define mock.On call
//   - s string
//   - err error
//   - strings []string
//   - fn func(string)
func (_e *MockUIInterface_Expecter) ShowFallbackDialog(s interface{}, err interface{}, strings interface{}, fn interface{}) *MockUIInterface_ShowFallbackDialog_Call {
	return &MockUIInterface_ShowFallbackDialog_Call{Call: _e.mock.On("ShowFallbackDialog", s, err, strings, fn)}
}

func (_c *MockUIInterface_ShowFallbackDialog_Call) Run(run func(s string, err error, strings []string, fn func(string))) *MockUIInterface_ShowFallbackDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 func(string)
		if args[3] != nil {
			arg3 = args[3].(func(string))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowFallbackDialog_Call) Return() *MockUIInterface_ShowFallbackDialog_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowFallbackDialog_Call) RunAndReturn(run func(s string, err error, strings []string, fn func(string))) *MockUIInterface_ShowFallbackDialog_Call {
	_c.Run(run)
	return _c
}

// ShowHelp provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowHelp() {
	_mock.Called()
	return
}

// MockUIInterface_ShowHelp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowHelp'
type MockUIInterface_ShowHelp_Call struct {
	*mock.Call
}

// ShowHelp is a helper method to define mock.On call
func (_e *MockUIInterface_Expecter) ShowHelp() *MockUIInterface_ShowHelp_Call {
	return &MockUIInterface_ShowHelp_Call{Call: _e.mock.On("ShowHelp")}
}

func (_c *MockUIInterface_ShowHelp_Call) Run(run func()) *MockUIInterface_ShowHelp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUIInterface_ShowHelp_Call) Return() *MockUIInterface_ShowHelp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowHelp_Call) RunAndReturn(run func()) *MockUIInterface_ShowHelp_Call {
	_c.Run(run)
	return _c
}

// ShowInfo provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowInfo(s string) {
	_mock.Called(s)
	return
}

// MockUIInterface_ShowInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowInfo'
type MockUIInterface_ShowInfo_Call struct {
	*mock.Call
}

// ShowInfo is a helper method to define mock.On call
//   - s string
func (_e *MockUIInterface_Expecter) ShowInfo(s interface{}) *MockUIInterface_ShowInfo_Call {
	return &MockUIInterface_ShowInfo_Call{Call: _e.mock.On("ShowInfo", s)}
}

func (_c *MockUIInterface_ShowInfo_Call) Run(run func(s string)) *MockUIInterface_ShowInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowInfo_Call) Return() *MockUIInterface_ShowInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowInfo_Call) RunAndReturn(run func(s string)) *MockUIInterface_ShowInfo_Call {
	_c.Run(run)
	return _c
}

// ShowLogs provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowLogs(s string, s1 string) {
	_mock.Called(s, s1)
	return
}

// MockUIInterface_ShowLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowLogs'
type MockUIInterface_ShowLogs_Call struct {
	*mock.Call
}

// ShowLogs is a helper method to define mock.On call
//   - s string
//   - s1 string
func (_e *MockUIInterface_Expecter) ShowLogs(s interface{}, s1 interface{}) *MockUIInterface_ShowLogs_Call {
	return &MockUIInterface_ShowLogs_Call{Call: _e.mock.On("ShowLogs", s, s1)}
}

func (_c *MockUIInterface_ShowLogs_Call) Run(run func(s string, s1 string)) *MockUIInterface_ShowLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowLogs_Call) Return() *MockUIInterface_ShowLogs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowLogs_Call) RunAndReturn(run func(s string, s1 string)) *MockUIInterface_ShowLogs_Call {
	_c.Run(run)
	return _c
}

// ShowNodeAvailabilityModal provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowNodeAvailabilityModal(s string, s1 string, fn func(string)) {
	_mock.Called(s, s1, fn)
	return
}

// MockUIInterface_ShowNodeAvailabilityModal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowNodeAvailabilityModal'
type MockUIInterface_ShowNodeAvailabilityModal_Call struct {
	*mock.Call
}

// ShowNodeAvailabilityModal is a helper method to define mock.On call
//   - s string
//   - s1 string
//   - fn func(string)
func (_e *MockUIInterface_Expecter) ShowNodeAvailabilityModal(s interface{}, s1 interface{}, fn interface{}) *MockUIInterface_ShowNodeAvailabilityModal_Call {
	return &MockUIInterface_ShowNodeAvailabilityModal_Call{Call: _e.mock.On("ShowNodeAvailabilityModal", s, s1, fn)}
}

func (_c *MockUIInterface_ShowNodeAvailabilityModal_Call) Run(run func(s string, s1 string, fn func(string))) *MockUIInterface_ShowNodeAvailabilityModal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(string)
		if args[2] != nil {
			arg2 = args[2].(func(string))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowNodeAvailabilityModal_Call) Return() *MockUIInterface_ShowNodeAvailabilityModal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowNodeAvailabilityModal_Call) RunAndReturn(run func(s string, s1 string, fn func(string))) *MockUIInterface_ShowNodeAvailabilityModal_Call {
	_c.Run(run)
	return _c
}

// ShowRetryDialog provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowRetryDialog(s string, err error, fn func() error, fn1 func()) {
	_mock.Called(s, err, fn, fn1)
	return
}

// MockUIInterface_ShowRetryDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowRetryDialog'
type MockUIInterface_ShowRetryDialog_Call struct {
	*mock.Call
}

// ShowRetryDialog is a helper method to define mock.On call
//   - s string
//   - err error
//   - fn func() error
//   - fn1 func()
func (_e *MockUIInterface_Expecter) ShowRetryDialog(s interface{}, err interface{}, fn interface{}, fn1 interface{}) *MockUIInterface_ShowRetryDialog_Call {
	return &MockUIInterface_ShowRetryDialog_Call{Call: _e.mock.On("ShowRetryDialog", s, err, fn, fn1)}
}

func (_c *MockUIInterface_ShowRetryDialog_Call) Run(run func(s string, err error, fn func() error, fn1 func())) *MockUIInterface_ShowRetryDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		var arg2 func() error
		if args[2] != nil {
			arg2 = args[2].(func() error)
		}
		var arg3 func()
		if args[3] != nil {
			arg3 = args[3].(func())
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowRetryDialog_Call) Return() *MockUIInterface_ShowRetryDialog_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowRetryDialog_Call) RunAndReturn(run func(s string, err error, fn func() error, fn1 func())) *MockUIInterface_ShowRetryDialog_Call {
	_c.Run(run)
	return _c
}

// ShowServiceScaleModal provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowServiceScaleModal(s string, v uint64, fn func(int)) {
	_mock.Called(s, v, fn)
	return
}

// MockUIInterface_ShowServiceScaleModal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowServiceScaleModal'
type MockUIInterface_ShowServiceScaleModal_Call struct {
	*mock.Call
}

// ShowServiceScaleModal is a helper method to define mock.On call
//   - s string
//   - v uint64
//   - fn func(int)
func (_e *MockUIInterface_Expecter) ShowServiceScaleModal(s interface{}, v interface{}, fn interface{}) *MockUIInterface_ShowServiceScaleModal_Call {
	return &MockUIInterface_ShowServiceScaleModal_Call{Call: _e.mock.On("ShowServiceScaleModal", s, v, fn)}
}

func (_c *MockUIInterface_ShowServiceScaleModal_Call) Run(run func(s string, v uint64, fn func(int))) *MockUIInterface_ShowServiceScaleModal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 func(int)
		if args[2] != nil {
			arg2 = args[2].(func(int))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowServiceScaleModal_Call) Return() *MockUIInterface_ShowServiceScaleModal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowServiceScaleModal_Call) RunAndReturn(run func(s string, v uint64, fn func(int))) *MockUIInterface_ShowServiceScaleModal_Call {
	_c.Run(run)
	return _c
}

// ShowShell provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) ShowShell(s string, s1 string) {
	_mock.Called(s, s1)
	return
}

// MockUIInterface_ShowShell_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowShell'
type MockUIInterface_ShowShell_Call struct {
	*mock.Call
}

// ShowShell is a helper method to define mock.On call
//   - s string
//   - s1 string
func (_e *MockUIInterface_Expecter) ShowShell(s interface{}, s1 interface{}) *MockUIInterface_ShowShell_Call {
	return &MockUIInterface_ShowShell_Call{Call: _e.mock.On("ShowShell", s, s1)}
}

func (_c *MockUIInterface_ShowShell_Call) Run(run func(s string, s1 string)) *MockUIInterface_ShowShell_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUIInterface_ShowShell_Call) Return() *MockUIInterface_ShowShell_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_ShowShell_Call) RunAndReturn(run func(s string, s1 string)) *MockUIInterface_ShowShell_Call {
	_c.Run(run)
	return _c
}

// SwitchView provides a mock function for the type MockUIInterface
func (_mock *MockUIInterface) SwitchView(s string) {
	_mock.Called(s)
	return
}

// MockUIInterface_SwitchView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwitchView'
type MockUIInterface_SwitchView_Call struct {
	*mock.Call
}

// SwitchView is a helper method to define mock.On call
//   - s string
func (_e *MockUIInterface_Expecter) SwitchView(s interface{}) *MockUIInterface_SwitchView_Call {
	return &MockUIInterface_SwitchView_Call{Call: _e.mock.On("SwitchView", s)}
}

func (_c *MockUIInterface_SwitchView_Call) Run(run func(s string)) *MockUIInterface_SwitchView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUIInterface_SwitchView_Call) Return() *MockUIInterface_SwitchView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUIInterface_SwitchView_Call) RunAndReturn(run func(s string)) *MockUIInterface_SwitchView_Call {
	_c.Run(run)
	return _c
}
